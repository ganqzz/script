# Built-in commands

```
help <builtin-command>

builtin <command>  # run builtin version <command>
command <command>  # run external version <command>
command -V <command>  # show info about <command>

time  # shell keyword

enable
disbale
compgen -k #
```


# Shell options

```
shopt <optname>  # print on|off
shopt -p <optname>  # print -s|-u
shopt -s <optname>  # set
shopt -u <optname>  # unset
```

- Options

[glob]
nullglob : match no pattern, null
failglob : match no pattern, error
dotglob : match hidden file
nocaseglob : case insensitive
globstar : ** : recursive search
extglob

nocasematch : case insensitive in if/case statement


# Shell operators


# Pattern matching (File globs)

- Wildcards
*       # wildcard: 0 or more
?       # wildcard: 1 character

- Character Set
[a-z]   # a-z  ※LC_COLLATEに注意する
[-0-9]  # -, 0-9
[0-9-]  # -, 0-9
[]]     # ]
[[]     # [
[\!]    # !
[\^]    # ^
[-]     # -
-       # -  ※わざわざSetにする必要はない
[^a-z]  # negate
[!a-z]  # negate : POSIX standard

- Linux Character Class
[:digit:]
[:upper:]
[:lower:]
[:alpha:]
[:alnum:]
[:space:]
[:graph:]  # printable except space
[:print:]  # printable, space
[:punct:]  # punctuation
[:cntrl:]  # control character
[:xdigit:] # hexadecimal

- Extended globs
@(match)  # only 1
?(match)  # 0 or 1
*(match)  # 0 or more
+(match)  # 1 or more
!(match)  # negate
match1|match2  # OR
@(?(match1|match2)|match3)  # nesting


# Regular Expression ([[ =~ ]])

- ERE only
- Return
    * 0 : match
    * 1 : not match
    * 2 : illegal
- BASH_REMATCH : array of matched backreferences
    0 : matched substring
    1-n : matched backreferences
```
[[ "abcde" =~ (b)(.)(d)e ]]
BASH_REMATCH[0] : bcde
BASH_REMATCH[1] : b
BASH_REMATCH[2] : c
BASH_REMATCH[3] : d
BASH_REMATCH[4] : <empty>
```


# Variables

- Positional parameters
$1, $2, ...
$0 : shell or shell script name

- Special parameters
$* : expands all the positional parameters. If double quoted, concatenate by IFS
$@ : expands all the positional parameters. If double quoted, each parameter expands to separate double quoted word.
$# : count of positional parameters
$? : last status code
$$ : process id of the shell
$! : most recent background process id
$_ : expands to the last argument to the previous command, expands to the previous command if no arguments
$- : current option flags

- Shell variables
IFS : Internal Field Separator, defalut "<space><tab><newline>"
RANDOM : random number between 0 - 32767

- Declare variables
```
typeset -i <int number>  # (obsolete)

declare -i <int number>
declare -u  # uppercase
declare -l  # lowercase
declare -r  # read-only
declare -a <array>  # Array
declare -A <array>  # Associative Array

export
declare -x
```

- Local variables
```
function hoge { local var=hoge; }  # オプションはdeclareと同じ。関数の中でのみ使える
```


# Functions

```
export -f # export function
declare -F # list functions
type <function> # show function definition
```


# Brace expansion

not glob, so shell does not stat the files
just expand string to list

```
echo {1..10}  # range
echo {10..1}
echo {00..20}  # padding
echo {a..z}
echo {a..z..2}  # step
echo {hoge,fuga}  # no space anywhere
echo fefe{,hoge}
echo fefe{hoge,}

cp file{,.bak}  # cp file file.bak
```


# Parameter expansion

```
VAR=hoge.txt
echo ${VAR#*.}
echo ${VAR%*.}

[ -z ${VAR##*hoge*} ]  # contains "hoge" string, return empty : dash compatible
```


# Directory substitution

```
echo ~+  # current dir
echo ~-  # previous dir

pushd
dirs
popd
```


# Arithmetic operation

```
((x++))
((x *= 5))
let x++
```


# Job Control

- fg / bg / jobs

- disown

Detach the process from bash
```
disown <pid>
<command> & disown  # immediately
```

- nohup (not bash built-in)

Immune to HUP : keep running even if the parent process is killed
```
nohup <command> &
```


# Redirection / Pipe

```
command > file 2>&1
command >& file   # 同上(bash shorthand)
command &> file   # 同上(better bash shorthand)
command 2>&1 | command2
command |& command2   # 同上(bash shorthand)
```

- Named pipe (FIFO)

allows only one process to this pipe
```
mkfifo pipe
echo "Message" > pipe

cat pipe  # 別シェル
```


# Coprocess

- 非同期サブシェルによるコマンド実行（プロセス間を双方向パイプで接続）
```
coproc cat -n
echo fuga >&${COPROC[1]}
read -u ${COPROC[0]} s; echo $s

# NAME
coproc hoge { cat -n; }
echo fuga >&${hoge[1]}
read -u ${hoge[0]} s; echo $s
```


# Script directory

```
# sourceした場合、${BASH_SOURCE[0]}にはscript自身のファイル名が入る（$0の場合はcallerが入る）
# この点が$0との違いになる
scr_dir="$(dirname "${BASH_SOURCE[0]}")"

# 絶対パスの取得
scr_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
scr_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)" # linkを実体に置き換える
```

- source example
```
$ cat outer.sh
#!/usr/bin/env bash
source ./middle.sh

$ cat middle.sh
#!/usr/bin/env bash
source ./inner.sh

$ cat inner.sh
#!/usr/bin/env bash
echo "\$0 = '$0'"
echo "\${BASH_SOURCE[0]} = '${BASH_SOURCE[0]}'"
echo "\${BASH_SOURCE[1]} = '${BASH_SOURCE[1]}'"
echo "\${BASH_SOURCE[2]} = '${BASH_SOURCE[2]}'"

$ ./outer.sh
$0 = './outer.sh'
$BASH_SOURCE[0] = './inner.sh'
$BASH_SOURCE[1] = './middle.sh'
$BASH_SOURCE[2] = './outer.sh'
```


# Command history

```
history
```

- Event
```
!!   # 直前（最後）
!$   # 直前（最後）
!n   # n番目
!-n  # 最後からn番目
![command]  # commandが一致するもの

- Word（:でEventの後に続ける。ex. !!:n）
:0   # command
:n   # n番目
:[x]-[y]   # x ~ y番目
:^   # 1番目
:$   # 最後
:*   # 1番目から最後まで（:1-$）
```


# Shortcut key (readline)

- 確認方法
    \C- : Ctrl(C-<KEY>)
    \e  : Meta(M-<KEY>) / Esc(ESC <KEY>)
```
bind -p | grep -v "^#"
```

- デフォルトキーバインド
------------[カーソル移動関連]------------
C-a 	beginning-of-line : 行頭へ移動
C-e 	end-of-line : 行末へ移動
C-f 	forward-char : 1文字進む
C-b 	backward-char : 1文字戻る
M-f 	forward-word : 1単語進む
M-b 	backward-word : 1単語戻る

------------[編集関連]------------
C-d 	delete-char : 1文字削除(Del)
C-h 	backward-delete-char : 左1文字削除(BS)
C-v <TAB> 	tab-insert : タブを挿入
C-t 	transpose-chars : カーソル前後の文字を入れ替える
M-t 	transpose-words : カーソル前後の単語を入れ替える
M-u 	upcase-word : 単語を大文字にする
M-l 	downcase-word : 単語を小文字にする
C-k 	kill-line : 行末まで削除
C-u 	unix-line-discard : 行頭まで削除
M-d 	kill-word : 次の単語削除(スペースTAB以外に_-/なども区切り)
M-C-?(BS) / M-C-h 	backward-kill-word : 前の単語削除(スペースTAB以外に_-/なども区切り)
C-w 	unix-word-rubout : 前の単語削除(スペースTABのみが区切り)
C-y 	yank : 削除した文字列を貼り付け

------------[履歴関連]------------
C-p 	previous-history : 直前のコマンド
C-n 	next-history : 次のコマンド
C-r 	reverse-search-history : コマンド履歴の後方インクリメンタル検索モード  ※fzf
C-s 	forward-search-history : コマンド履歴の前方インクリメンタル検索モード  ※画面ロック（tty:stop）
M-. 	yank-last-arg : 直前のコマンドの引数を貼り付け

------------[その他]------------
C-l 	clear : 画面をクリア
C-i 	complete : (TAB)
C-d 	eof(end-of-file) : 入力終了
C-j / C-m 	accpet-line : Enter
C-[ 	ESC
